<?xml version="1.0" encoding="UTF-8" ?> 
<Module>
<ModulePrefs title="香港天氣報告" 
	directory_title="Weather"
	description="提供最新香港天氣報告, 紫外線指數, 現時生效警告, 七日天氣預告, 及是日農曆資訊. Provide Most Updated Hong Kong Local Weather Info, UV-Index, Warning In Force, 7 days forecast, and Lunar calendar info."
	title_url="http://www.weather.gov.hk"
	screenshot="http://labajax.googlepages.com/hkwscreen.png"
	thumbnail="http://labajax.googlepages.com/hkwicon.png"
	width="300"
	scrolling="false"
	singleton="false"
	author="floatingcat"
	author_photo="http://floatingcat.googlepages.com/chunmiu.png"
	author_email="floatingcat@gmail.com"
	author_aboutme="I'm a developer come from Hong Kong, China. "
	author_affiliation="Google"
	author_location="Hong Kong"
	author_link="http://floatingcat.blogspot.com/"
    category="news"
    category2="lifestyle">
	<Require feature="analytics"/>	
	<Require feature="setprefs" /> 
	<Require feature="settitle" /> 
	<Require feature="dynamic-height" /> 
  	<Locale lang="zh-tw" country="hk" />
  	<Locale lang="en" country="us" />
</ModulePrefs>

<UserPref name="dispLang" display_name="Display Language" datatype="enum" default_value="0">
	<EnumValue value="0" display_value="Traditional Chinese" />
	<EnumValue value="1" display_value="English" />
</UserPref>

<Content type="html">
<![CDATA[
<div id="content_div">
	<style type="text/css">
	#main { 
		font-size : 9pt;
		width : 100%;
		height : 240px;
		table-layout : fixed;
		padding : 0px;
		margin : 0px;
	} 
	.newyear {
		background-image : url(http://www.gmodules.com/ig/proxy?url=http://labajax.googlepages.com/hkw_newyear.png);
		background-repeat : no-repeat;
	}
	.spring { 
		background-image : url(http://www.gmodules.com/ig/proxy?url=http://labajax.googlepages.com/hkw_spring.png);
		background-repeat : no-repeat;
	} 
	.summer { 
		background-image : url(http://www.gmodules.com/ig/proxy?url=http://labajax.googlepages.com/hkw_summer.png);
		background-repeat : no-repeat;
	} 
	.autumn { 
		background-image : url(http://www.gmodules.com/ig/proxy?url=http://labajax.googlepages.com/hkw_autumn.png);
		background-repeat : no-repeat;
	} 
	.winter { 
		background-image : url(http://www.gmodules.com/ig/proxy?url=http://labajax.googlepages.com/hkw_winter.png);
		background-repeat : no-repeat;
	}	
	td.title { 
		padding-bottom : 0;
		text-align:center;
	}
	.alpha {
		opacity : 0.50;
		filter : alpha(opacity=50,Style=0);	
	}
	td.lower { 
		text-align:right; 
		padding-bottom : 0;
		border:2px solid #08f;
		border-bottom : 0px;
		background-color : #ccf;
	}
	td.frame {
		font-size : 14pt;
		border : 1px solid #888;
		text-align : center;
		height : 48px;
	} 
	.provider { 
		text-align : right;
		font-size : 6pt;
	} 
	#ph_weather img {
		width : 90%;
	}	
	#ph_lunar {
		font-size : 10pt;
		background-color : #fcc;
		border : 1px solid #f33;
		height : 24px;
	} 

	#lblWarning { 
		padding-bottom : 0;
		border:2px solid #fc1;
		border-top : 0px;
		background-color : #ffb;
	}
	#ph_warning { 
		border : 2px solid #fc1;
		text-align : center;
		overflow : hidden;
		width : 100%;
		height : 28px;
	}
	#ph_warning_ico { 
		text-align : center;
		overflow : hidden;
		background-color : #ffb;
		width : 100%;
		height : 36px;
	}	
	#ph_warning_ico img { 
		width : 32px; 
		height : 32px;
		padding : 1px;
	}
	
	#ph_forecast { 
		border : 2px solid #08f;
		text-align : center;
		overflow : hidden;
		background-color : #ccf;
		width : 100%;
		height : 36px;
	}	
	#ph_forecast img { 
		width : 32px; 
		height : 32px;
		padding : 1px;
	}
	
	#ph_uvindex { 
		padding:1px;
		font-size : 12pt;
		width : 100%;
		height : 100%;
	}
	#ph_uvindex span { 
		font-size : 9pt;
	}
	#ph_lunarcalendar {
		padding:2px 2px 4px 2px;text-align:center	
	}
	</style>
	<table id="main" border="0" padding="0" spacing="0">
		<tr>
			<td id="ph_lunar" colspan="4"></td>
		</tr>
		<tr>
			<td class="title" id="lblWeather">&nbsp;</td>
			<td class="title" id="lblUvidx">&nbsp;</td>
			<td class="title" id="lblTemp">&nbsp;</td>
			<td class="title" id="lblHum">&nbsp;</td>
		</tr>
		<tr>
			<td class="frame" id="ph_weather">???</td>
			<td class="frame" id="ph_uvindex">???</td>
			<td class="frame" id="ph_temperature">???</td>
			<td class="frame" id="ph_humidity">???</td>
		</tr>
		<tr>
			<td id="ph_warning" colspan="4">
				<div id="ph_warning_ico">&nbsp;</div>
			</td>
		</tr>
		<tr>
			<td id="lblWarning" colspan="2">&nbsp;</td>
			<td id="lbl7days" class="lower" colspan="2">&nbsp;</td>
		</tr>		
		<tr>
			<td id="ph_forecast" colspan="4">&nbsp;</td>
		</tr>
		<tr>
			<td class="provider" colspan="4">
				<span id="lblProvider">&nbsp;</span> (<span id="ph_lastupdate">&nbsp;</span>) 
			</td>
		</tr>
	</table>
</div>
<script type="text/javascript">
/*****************************************************************************
	Extend String Object functions
*****************************************************************************/	
String.prototype.LZero = function(max) {
	var sOut = this;
	for ( var i = 0; i < max - this.length; i ++ ) {
		sOut = "0"+ sOut;
	}
	return sOut;
}
String.prototype.trim = function() {
	var m = this.match(/^\s*(\S+(\s+\S+)*)\s*$/);
	return (m == null) ? "" : m[1];	
}
/*****************************************************************************
	Local Weather Info
*****************************************************************************/
var isFireFox = navigator.userAgent.toLowerCase().indexOf("firefox") > 0 ? true : false;

//====================================== Url of Current Weather Warnings from HKO
var sCurrentUrl = "http://www.weather.gov.hk/textonly/forecast/englishwx.htm";
var sWarningUrl = "http://www.weather.gov.hk/textonly/warning/warn.htm";
var sForecastUrl = "http://www.weather.gov.hk/textonly/forecast/nday.htm";

//====================================== Weather cartoon url prefix
var sCartoonPrefix = "http://www.hko.gov.hk/images/wxicon/";
var sWarningPrefix = "http://www.weather.gov.hk/textonly/img/warn/";
var sForecastPrefix = "http://www.hko.gov.hk/images/wxicon/small/pic50.png";
var gLang = 0;

function setLocale() {
	_IG_SetTitle(saTitle[gLang]);
	_gel("lblWeather").innerHTML = saWord[0][gLang];
	_gel("lblUvidx").innerHTML = saWord[1][gLang];
	_gel("lblTemp").innerHTML = saWord[2][gLang];
	_gel("lblHum").innerHTML = saWord[3][gLang];
	_gel("lblWarning").innerHTML = saWord[4][gLang];
	_gel("lbl7days").innerHTML = saWord[5][gLang];
	_gel("lblProvider").innerHTML = saWord[6][gLang];
}
//====================================== Weather Enums
var saTitle = [
	"香港天氣報告", "Hong Kong Weather"
];

var saWord = [
	["現時天氣", "Current"],
	["紫外線指數", "UV Index"],
	["氣溫", "Air Temp."], // Air Temperature
	["相對濕度", "Humidity"],// Relative Humidity
	["現時生效警告", "Warning in force"],
	["七日天氣預告", "7 days forecast"],
	["天氣由香港天文台提供", "Weather information is provided by HKO"],
	["更新", "Last Update"]
];

var warningTexts = [
	["","",""], 
	["tc1.gif", "一號戒備信號", "Standby Signal No. 1"],
	["tc3.gif", "三號強風信號", "Strong Wind Signal No. 3"],
	["tc8ne.gif", "八號東北烈風或暴風信號", "No. 8 NorthEast Gale Or Storm Signal"],
	["tc8nw.gif", "八號西北烈風或暴風信號", "No. 8 NorthWest Gale Or Storm Signal"],
	["tc8se.gif", "八號東南烈風或暴風信號", "No. 8 SouthEast Gale Or Storm Signal"],
	["tc8sw.gif", "八號西南烈風或暴風信號", "No. 8 SouthWest Gale Or Storm Signal"],
	["tc9.gif", "九號烈風或暴風增強信號", "Increasing Gale Or Storm Signal No. 9"],
	["tc10.gif", "十號颶風信號", "Hurricane Signal No. 10"],
	["raina.gif", "黃色暴雨警告信號", "Amber Rainstorm Warning Signal"],
	["rainr.gif", "紅色暴雨警告信號", "Red Rainstorm Warning Signal"],
	["rainb.gif", "黑色暴雨警告信號", "Black Rainstorm Warning Signal"],
	["ts.gif", "雷暴警告", "Thunderstorm Warning"],
	["ntfl.gif", "新界北部水浸特別報告", "Special Announcement of Flooding in Northern New Territories"],
	["landslip.gif", "山泥傾瀉警告", "Landslip Warning"],
	["sms.gif", "強烈季候風信號", "Strong Monsoon Signal"],
	["frost.gif", "霜凍警告", "Frost Warning"],
	["firey.gif", "黃色火災危險警告", "Yellow Fire Danger Warning"],
	["firer.gif", "紅色火災危險警告", "Red Fire Danger Warning"],
	["cold.gif", "寒冷天氣警告", "Cold Weather Warning"],
	["vhot.gif", "酷熱天氣警告", "Very Hot Weather Warning"],
	["tsunami-warn.gif", "海嘯警告", "Tsunami Warning"]
];	 

var cartoonTexts = [
	[50, "陽光充沛", "Sunny"],
	[51, "間有陽光", "Sunny Periods"],
	[52, "短暫陽光", "Sunny Intervals"],
	[53, "間有陽光 幾陣驟雨", "Sunny Periods with A Few Showers"],
	[54, "短暫陽光 有驟雨", "Sunny Intervals with Showers"],
	[60, "多雲", "Cloudy"],
	[61, "密雲", "Overcast"],
	[62, "微雨", "Light Rain"],
	[63, "雨", "Rain"],
	[64, "大雨", "Heavy Rain"],
	[65, "雷暴", "Thunderstorms"],
	[70, "天色良好", "Fine"],
	[71, "天色良好", "Fine"],
	[72, "天色良好", "Fine"],
	[73, "天色良好", "Fine"],
	[74, "天色良好", "Fine"],
	[75, "天色良好", "Fine"],
	[76, "大致多雲", "Mainly Cloudy"],
	[77, "天色大致良好", "Mainly Fine"],
	[80, "大風", "Windy"],
	[81, "乾燥", "Dry"],
	[82, "潮濕", "Humid"],
	[83, "霧", "Fog"],
	[84, "薄霧", "Mist"],
	[85, "煙霞", "Haze"],
	[90, "熱", "Hot"],
	[91, "暖", "Warm"],
	[92, "涼", "Cool"],
	[93, "冷", "Cold"]
];		

var uvColorCode = [
	[0, "#4eb400", "低", "Low"],
	[1, "#4eb400", "低", "Low"],
	[2, "#4eb400", "低", "Low"],
	[3, "#f7e400", "中等", "Moderate"],
	[4, "#f7e400", "中等", "Moderate"],
	[5, "#f7e400", "中等", "Moderate"],
	[6, "#f85900", "高", "High"],
	[7, "#f85900", "高", "High"],
	[8, "#d8001d", "甚高", "Very High"],
	[9, "#d8001d", "甚高", "Very High"],
	[10, "#d8001d", "甚高", "Very High"],
	[11, "#998cff", "極高", "Extreme"],
	[12, "#998cff", "極高", "Extreme"],
	[13, "#998cff", "極高", "Extreme"],
	[14, "#998cff", "極高", "Extreme"],
	[15, "#998cff", "極高", "Extreme"]
];
//======================================
function fetchCurrent(responseText) {
	try {
		var sLastUpdate = "", currentTemperature = 0, currentHumidity = 0; 
		var currentCartoon = 0, currentCartoonText = "", currentUVIndex = 0, currentUVRadiation = 0;
		var sCurrent = responseText;
		
		var sa;
		sa = sCurrent.match(/<I>BULLETIN UPDATED AT ([\s\S.]*)<\/I>/im);
		if ( sa != null && sa.length == 2 )	sLastUpdate = sa[1];
				 
		sa = sCurrent.match(/AIR TEMPERATURE : ([\d.]*) DEGREES CELSIUS/im);
		if ( sa != null && sa.length == 2 ) currentTemperature = parseInt(sa[1], 10);

		sa = sCurrent.match(/RELATIVE HUMIDITY : ([\d.]*) PER CENT/im);
		if ( sa != null && sa.length == 2 )	currentHumidity = parseInt(sa[1], 10);

		sa = sCurrent.match(/WEATHER CARTOON : NO.([\d.]*) - ([\w^n]*)/im);
		if ( sa != null && sa.length >= 2 ) {
			currentCartoon = parseInt(sa[1], 10);
			// if ( sa.length >= 3 ) currentCartoonText = sa[2];
		}
				 
		// DURING THE PAST HOUR THE MEAN UV INDEX RECORDED AT KING'S PARK : 0.0
		sa = sCurrent.match(/THE MEAN UV INDEX RECORDED AT KING'S PARK : ([\d.]*).\nINTENSITY OF UV RADIATION : ([\w^n]*)/im);
		if ( sa != null && sa.length >= 2 )	{
			currentUVIndex = parseInt(sa[1], 10);
			if ( sa.length == 3 ) currentUVRadiation = sa[2];
		}
		
		var lastUpdateTime = sLastUpdate.match(/([\d.]*).:([\d.]*)./im);
		
		_gel('ph_weather').innerHTML = "<img src=\""+ getCartoonPic(currentCartoon) +"\" alt=\""+ getCartoonText(currentCartoon) +"\"  title=\""+ getCartoonText(currentCartoon) +"\">";		
		_gel('ph_temperature').innerHTML = currentTemperature +""+ String.fromCharCode(0x00b0) +"C";
		_gel('ph_humidity').innerHTML = currentHumidity +""+ String.fromCharCode(0x0025);
		_gel('ph_uvindex').style.backgroundColor = uvColorCode[currentUVIndex][1];
		_gel('ph_uvindex').innerHTML = currentUVIndex + " <span>("+ uvColorCode[currentUVIndex][2+gLang] +")</span>";
		_gel('ph_lastupdate').innerHTML = saWord[7][gLang] +" : "+ lastUpdateTime[0];

	} catch(e) {
		//  alert( "fetchCurrent="+ e);
		return false;
	}
	return true;	   
}
//======================================
function getCartoonPic( cartoonNum ) {
	return sCartoonPrefix +"pic"+ cartoonNum +".png";
}
//======================================
function getCartoonText( cartoonNum ) {
	for ( var i=0; i < cartoonTexts.length; i ++ ) {
		if ( cartoonTexts[i][0] == cartoonNum ) return cartoonTexts[i][1+gLang];  
	}
	return "";
}
//====================================== 
function fetchWarning(responseText) {
	try {
		var html = "";	
		var warningPage = responseText;
		var re = new RegExp("<!--Warning Codes\n([\\s\\S.]*)\n-->");
		var sMatch = warningPage.match(re);

		if ( sMatch == null ) {
			html += "&nbsp;";
			_gel('ph_warning_ico').setAttribute(isFireFox ? "class" : "className", "alpha");
			_gel('lblWarning').setAttribute(isFireFox ? "class" : "className", "alpha");
		} else if ( sMatch.length >= 2 ) { 				
			var saMatch = sMatch[1].split("\n");
			for ( var i=0; i < saMatch.length; i ++ ) {
				var warningCode = parseInt(saMatch[i].replace(" ", ""),10);
				html += "<img src=\""+ sWarningPrefix + warningTexts[warningCode][0] +"\""
					+ " alt=\""+ warningTexts[warningCode][1] +"\""
					+ " title=\""+ warningTexts[warningCode][1] +"\">";
			}		
		}
		_gel('ph_warning_ico').innerHTML = html;
	} catch(e) {
		// alert("fetchWarning="+ e);
		return false;
	}
	return true;
}
//======================================
function fetchForecast(responseText) {
	try { 
		var html = "";	
		var forecastPage = responseText;
		var sMatch = forecastPage.match(/cartoon no. (\d+)/ig);
		var sDay = forecastPage.match(/Date\/Month (\d+\/\d+)/img);

		if ( sMatch == null || sDay == null ) {
			html = "&nbsp;";
		} else if ( sMatch.length == sDay.length ) {

			for ( var i=0; i < sMatch.length; i ++ ) {
				var cartoonCode = parseInt(sMatch[i].replace("cartoon no. ", ""),10);
				html += "<img src=\""+ getCartoonPic(cartoonCode) +"\""
					+ " title=\""+ sDay[i].replace("Date/Month ","") +"  "+ getCartoonText( cartoonCode ) +"\">";
			}
		}
		_gel('ph_forecast').innerHTML = html;
	} catch(e) {
		// alert("fetchForecast="+ e);
		return false;
	}
	return true;
}
//*****************************************************************************
//	Lunar Calendar 農曆日期
//*****************************************************************************
var lunarInfo = [
	0x4bd8,0x4ae0,0xa570,0x54d5,0xd260,0xd950,0x5554,0x56af,0x9ad0,0x55d2,
	0x4ae0,0xa5b6,0xa4d0,0xd250,0xd295,0xb54f,0xd6a0,0xada2,0x95b0,0x4977,
	0x497f,0xa4b0,0xb4b5,0x6a50,0x6d40,0xab54,0x2b6f,0x9570,0x52f2,0x4970,
	0x6566,0xd4a0,0xea50,0x6a95,0x5adf,0x2b60,0x86e3,0x92ef,0xc8d7,0xc95f,
	0xd4a0,0xd8a6,0xb55f,0x56a0,0xa5b4,0x25df,0x92d0,0xd2b2,0xa950,0xb557,
	0x6ca0,0xb550,0x5355,0x4daf,0xa5b0,0x4573,0x52bf,0xa9a8,0xe950,0x6aa0,
	0xaea6,0xab50,0x4b60,0xaae4,0xa570,0x5260,0xf263,0xd950,0x5b57,0x56a0,
	0x96d0,0x4dd5,0x4ad0,0xa4d0,0xd4d4,0xd250,0xd558,0xb540,0xb6a0,0x95a6,
	0x95bf,0x49b0,0xa974,0xa4b0,0xb27a,0x6a50,0x6d40,0xaf46,0xab60,0x9570,
	0x4af5,0x4970,0x64b0,0x74a3,0xea50,0x6b58,0x5ac0,0xab60,0x96d5,0x92e0,
	0xc960,0xd954,0xd4a0,0xda50,0x7552,0x56a0,0xabb7,0x25d0,0x92d0,0xcab5,
	0xa950,0xb4a0,0xbaa4,0xad50,0x55d9,0x4ba0,0xa5b0,0x5176,0x52bf,0xa930,
	0x7954,0x6aa0,0xad50,0x5b52,0x4b60,0xa6e6,0xa4e0,0xd260,0xea65,0xd530,
	0x5aa0,0x76a3,0x96d0,0x4afb,0x4ad0,0xa4d0,0xd0b6,0xd25f,0xd520,0xdd45,
	0xb5a0,0x56d0,0x55b2,0x49b0,0xa577,0xa4b0,0xaa50,0xb255,0x6d2f,0xada0,
	0x4b63,0x937f,0x49f8,0x4970,0x64b0,0x68a6,0xea5f,0x6b20,0xa6c4,0xaaef,
	0x92e0,0xd2e3,0xc960,0xd557,0xd4a0,0xda50,0x5d55,0x56a0,0xa6d0,0x55d4,
	0x52d0,0xa9b8,0xa950,0xb4a0,0xb6a6,0xad50,0x55a0,0xaba4,0xa5b0,0x52b0,
	0xb273,0x6930,0x7337,0x6aa0,0xad50,0x4b55,0x4b6f,0xa570,0x54e4,0xd260,
	0xe968,0xd520,0xdaa0,0x6aa6,0x56df,0x4ae0,0xa9d4,0xa4d0,0xd150,0xf252,
	0xd520 ];
var solarMonth = [31,28,31,30,31,30,31,31,30,31,30,31];
var Gan = ["甲","乙","丙","丁","戊","己","庚","辛","壬","癸"];
var Zhi = ["子","丑","寅","卯","辰","巳","午","未","申","酉","戌","亥"];
var Animals = [
	["鼠", "Rat"],
	["牛", "Ox"],
	["虎", "Tiger"],
	["兔", "Rabbit"],
	["龍", "Dragon"],
	["蛇", "Snake"],
	["馬", "Horse"],
	["羊", "Sheep"],
	["猴", "Monkey"],
	["雞", "Rooster"],
	["狗", "Dog"],
	["豬", "Pig"]
];
var solarTerm = [
	["小寒", "minor cold"],
	["大寒", "major cold"],
	["立春", "start of spring"],
	["雨水", "rain water"],
	["驚蟄", "awakening of insects"],
	["春分", "vernal equinox"],
	["清明", "clear and bright"],
	["穀雨", "grain rains"],
	["立夏", "start of summer"],
	["小滿", "grain full"],
	["芒種", "grain in ear"],
	["夏至", "summer solstice"],
	["小暑", "minor heat"],
	["大暑", "major heat"],
	["立秋", "start of autumn"],
	["處暑", "limit of heat"],
	["白露", "white dew"],
	["秋分", "autumnal equinox"],
	["寒露", "cold dew"],
	["霜降", "descent of frost"],
	["立冬", "start of winter"],
	["小雪", "minor snow"],
	["大雪", "major snow"],
	["冬至", "winter solstice"]
];
var sTermInfo = [0,21208,42467,63836,85337,107014,128867,150921,173149,195551,218072,240693,263343,285989,308563,331033,353350,375494,397447,419210,440795,462224,483532,504758];
var nStr1 = ["日", "一", "二", "三", "四", "五", "六", "七", "八", "九", "十"];
var nStr2 = ["初", "十", "廿", "卅", ""];
var monthName = [
	["月", "MonthEnum"],
	["正", "Primens"], // (正月)
	["二", "Apricomens"], // (杏月)
	["三", "Peacimens"], // (桃月)
	["四", "Plumens"], // (梅月)
	["五", "Guavamens"], // (榴月)
	["六", "Lotumens"],  // (荷月)
	["七", "Orchimens"], //  (蘭月)
	["八", "Osmanthumens"], // (桂月)
	["九", "Chrysanthemens"], //  (菊月)
	["十", "Benimens"], //  (良月)
	["十一", "Hiemens"], //  (冬月)
	["十二", "Lamens"] //  (臘月)
];

var lunarFtv = [	//農曆節日 *表示放假日
	["0101", "春節", "Chinese New Year"],
	["0115", "元宵", "Lantern Festival"],
	["0505", "端午", "Dragon Boat Festival"],
	["0707", "七夕", "Night of Sevens"],
	["0715", "中元", "Ghost Festival"],
	["0815", "中秋", "Mid-Autumn Festival"],
	["0909", "重陽", "Double Ninth Festival"],
	["1208", "臘八", "Laba Rice Porridge Festival"],
	["1223", "謝灶", "Kitchen God Festival"],
	["0100", "除夕", "Lunar New Year's Eve"] 
];
//====================================== 傳回農曆 y年的總天數
function lYearDays(y) {
	 var i, sum = 348;
	for (i=0x8000; i>0x8; i>>=1) sum += (lunarInfo[y-1900] & i)? 1: 0;
	return(sum+leapDays(y));
}
//====================================== 傳回農曆 y年閏月的天數
function leapDays(y) {
	if(leapMonth(y)) 
		return( (lunarInfo[y-1899]&0xf)==0xf? 30: 29);
   	else 
   		return(0);
}
//====================================== 傳回農曆 y年閏哪個月 1-12 , 沒閏傳回 0
function leapMonth(y) {
	var lm = lunarInfo[y-1900] & 0xf;
	return(lm==0xf?0:lm);
}
//====================================== 傳回農曆 y年m月的總天數
function monthDays(y,m) {
	return( (lunarInfo[y-1900] & (0x10000>>m))? 30: 29 );
}
//====================================== 算出農曆, 傳入日期物件, 傳回農曆日期物件
//  該物件屬性有 .year .month .day .isLeap
function Lunar(objDate) {				   
	var i, leap = 0, temp = 0;
	var offset = (Date.UTC(objDate.getFullYear(),objDate.getMonth(),objDate.getDate()) - Date.UTC(1900,0,31))/86400000;		   
	for(i=1900; i<2100 && offset>0; i++) { temp=lYearDays(i); offset-=temp; }	
	if(offset<0) { offset+=temp; i--; }
	this.year = i;
   
	leap = leapMonth(i); //閏哪個月
	this.isLeap = false;	   
	for(i=1; i<13 && offset>0; i++) {
		//閏月
		if(leap>0 && i==(leap+1) && this.isLeap==false)
			{ --i; this.isLeap = true; temp = leapDays(this.year); }
		else
			{ temp = monthDays(this.year, i); }
	
		//解除閏月
		if(this.isLeap==true && i==(leap+1)) this.isLeap = false;  
			offset -= temp;
	}

	if(offset==0 && leap>0 && i==leap+1)
      		if(this.isLeap)
         			{ this.isLeap = false; }
      		else
         			{ this.isLeap = true; --i; }

   	if(offset<0) { 
   		offset += temp; --i; 
   	}
	this.month = i;
	this.day = offset + 1;
}
//============================== 傳回國曆 y年某m+1月的天數
function solarDays(y,m) {
	if(m==1)
		return(((y%4 == 0) && (y%100 != 0) || (y%400 == 0))? 29: 28);
	else
		return(solarMonth[m]);
}
//============================== 傳入 offset 傳回干支, 0=甲子
function cyclical(num) {
	return(Gan[num%10]+Zhi[num%12]);
}
//============================== 月曆屬性
function calElement(sYear,sMonth,sDay,week,lYear,lMonth,lDay,isLeap,cYear,cMonth,cDay) {
	this.isToday    = false;
	//國曆
	this.sYear      = sYear;   //西元年4位數字
	this.sMonth     = sMonth;  //西元月數字
	this.sDay       = sDay;    //西元日數字
	this.week       = week;    //星期, 1個中文
	//農曆
	this.lYear      = lYear;   //西元年4位數字
	this.lMonth     = lMonth;  //農曆月數字
	this.lDay       = lDay;    //農曆日數字
	this.isLeap     = isLeap;  //是否為農曆閏月?
	//八字
	this.cYear      = cYear;   //年柱, 2個中文
	this.cMonth     = cMonth;  //月柱, 2個中文
	this.cDay       = cDay;    //日柱, 2個中文
	this.color      = '';
	this.lunarFestival = getLunarFtv(lMonth,lDay); //農曆節日
	this.solarFestival = ''; //國曆節日
	this.solarTerms    = ''; //節氣
}
//============================== 某年的第n個節氣為幾日(從0小寒起算)
function sTerm(y,n) {
   var offDate = new Date( ( 31556925974.7*(y-1900) + sTermInfo[n]*60000  ) + Date.UTC(1900,0,6,2,5) );
   return(offDate.getUTCDate());
}
//============================== 傳回月曆物件 (y年,m+1月)
//
// 功能說明: 傳回整個月的日期資料物件 
// 使用方式: OBJ = new calendar(年,零起算月); 
// OBJ.length      傳回當月最大日
// OBJ.firstWeek   傳回當月一日星期	  
// 由 OBJ[日期].屬性名稱 即可取得各項值	
// OBJ[日期].isToday  傳回是否為今日 true 或 false  
// 其他 OBJ[日期] 屬性參見 calElement() 中的註解
//
function calendar(y,m,i) {	   
	var sDObj, lDObj, lY, lM, lD=1, lL, lX=0, tmp1, tmp2, tmp3;
	var cY, cM, cD; //年柱, 月柱, 日柱
	var lDPOS = new Array(3);
	var n = 0;
	var firstLM = 0;		  	
	sDObj = new Date(y,m,1,0,0,0,0);    //當月一日日期	
	this.length = solarDays(y,m);    //國曆當月天數
	this.firstWeek = sDObj.getDay();    //國曆當月1日星期幾
	
	////////年柱 1900年立春後為庚子年(60進制36)
	if(m<2) cY = cyclical(y-1900+36-1);
	else cY = cyclical(y-1900+36);
	var term2 = sTerm(y,2); //立春日期
	
	////////月柱 1900年1月小寒以前為 丙子月(60進制12)
	var firstNode = sTerm(y,m*2) //傳回當月「節」為幾日開始
	cM = cyclical((y-1900)*12+m+12);
	
	//當月一日與 1900/1/1 相差天數
	//1900/1/1與 1970/1/1 相差25567日, 1900/1/1 日柱為甲戌日(60進制10)
	var dayCyclical = Date.UTC(y,m,1,0,0,0,0)/86400000+25567+10;

	if ( lD>lX ) {
		sDObj = new Date(y,m,i+1); //當月一日日期
		lDObj = new Lunar(sDObj); //農曆
		lY = lDObj.year; //農曆年
		lM = lDObj.month; //農曆月
		lD = lDObj.day; //農曆日
		lL = lDObj.isLeap; //農曆是否閏月
		lX = lL? leapDays(lY): monthDays(lY,lM); //農曆當月最後一天		
		if ( n==0 ) firstLM = lM;
		lDPOS[n++] = i-lD+1;
	}
	
	//依節氣調整二月分的年柱, 以立春為界
	if ( m==1 && (i+1)==term2 ) cY = cyclical(y-1900+36);
	//依節氣月柱, 以「節」為界
	if((i+1)==firstNode) cM = cyclical((y-1900)*12+m+13);
	//日柱
	cD = cyclical(dayCyclical+i);
	
	this[0] = new calElement(y, m+1, i+1, nStr1[(i+this.firstWeek)%7],
	                       lY, lM, lD++, lL,
	                       cY ,cM, cD ); 

	//節氣
	tmp1 = sTerm(y,m*2  )-1;
	tmp2 = sTerm(y,m*2+1)-1;
	if ( tmp1 == i ) {
		this[0].solarTerms = solarTerm[m*2][gLang];
	}
	if ( tmp2 == i ) {
		this[0].solarTerms = solarTerm[m*2+1][gLang];
	}
}
//======================================= 傳回該年的復活節(春分後第一次滿月週後的第一主日)
function easter(y) {
	var term2 = sTerm(y,5); //取得春分日期
	var dayTerm2 = new Date(Date.UTC(y,2,term2,0,0,0,0)); //取得春分的國曆日期物件(春分一定出現在3月)
	var lDayTerm2 = new Lunar(dayTerm2); //取得取得春分農曆

	if (lDayTerm2.day<15) //取得下個月圓的相差天數
		var lMlen = 15-lDayTerm2.day;
	else
		var lMlen = (lDayTerm2.isLeap? leapDays(y): monthDays(y,lDayTerm2.month)) - lDayTerm2.day + 15;

	//一天等於 1000*60*60*24 = 86400000 毫秒
	var l15 = new Date(dayTerm2.getTime() + 86400000*lMlen ); //求出第一次月圓為國曆幾日
	var dayEaster = new Date(l15.getTime() + 86400000*( 7-l15.getUTCDay() ) ); //求出下個週日

	this.m = dayEaster.getUTCMonth();
	this.d = dayEaster.getUTCDate();
}
//======================================= 傳回農曆節日
function getLunarFtv(m, d) {
	var mday = m.toString().LZero(2) + d.toString().LZero(2);
	for ( var i=0; i < lunarFtv.length; i ++ ) {
		if ( lunarFtv[i][0] == mday ) return lunarFtv[i][1+gLang];
	}
	return "";
}
//====================== 中文日期
function cDay(d){
	var s;
	switch (d) {
		case 10: s = "初十"; break;
		case 20: s = "二十"; break;
		case 30: s = "三十"; break;
		default :
	 		s = nStr2[Math.floor(d/10)];
	 		s += nStr1[d%10];
	}
	return(s);
}
//====================== english day
function eDay(d){
	var s;
	switch (d) {
		case 1: case 21: case 31:
			s = d  +" <sup>st</sup>";break;
		case 2: case 22: 
			s = d  +" <sup>nd</sup>";break;
		case 3: case 23: 
			s = d +" <sup>rd</sup>";break;
		default :
	 		s = d +" <sup>th</sup>";
	}
	return(s);
}	
//====================== Today Lunar Calendar Info
function calculateLunar(thisDay) {
	var y = thisDay.getFullYear();
	var m = thisDay.getMonth();
	var d = thisDay.getDate() -1;	
	
	var oLunar = new calendar(y,m,d);
	var md = 0;
	var sYearName = "", lYear = "", sMonth = "", sDay = "";
	sYearName = oLunar[md].cYear;
	lYear = oLunar[md].lYear;
	sMonth = (oLunar[md].isLeap ? "閏":"") + monthName[oLunar[md].lMonth][0];
	sDay = cDay(oLunar[md].lDay) ;
	var sExtraInfo = "";
	
	var sLunar = "";
	if ( gLang == 1 ) {
		sMonth = (oLunar[md].isLeap ? "Intercalary ":"") + monthName[oLunar[md].lMonth][gLang];
		sLunar =  eDay(oLunar[md].lDay) +" "+ sMonth +" ("+ oLunar[md].lMonth +"), Year of the "+  Animals[(lYear-4)%12][gLang] +"<br/>" ;		
		if ( oLunar[md].solarTerms.length > 0 ) sLunar += "【Solar Term:"+ oLunar[md].solarTerms +"】";
		if ( oLunar[md].lunarFestival.length > 0 ) sLunar += "【"+ oLunar[md].lunarFestival +"】";
		
	} else {
		sLunar = " 農曆 "+ sYearName + Animals[(lYear-4)%12][gLang] +"年"+ sMonth + sDay +"日 ";
		if ( oLunar[md].solarTerms.length > 0 ) sLunar += "【節氣:"+ oLunar[md].solarTerms +"】";
		if ( oLunar[md].lunarFestival.length > 0 ) sLunar += "【"+ oLunar[md].lunarFestival +"】";
	}
	
	var html = "<div id='ph_lunarcalendar'> "+ sLunar + " </div>";
	_gel('ph_lunar').innerHTML = html;
	_gel('ph_lunar').setAttribute("title", "Agricultural Calender 農曆");

	changeTableBackground( oLunar[md].lMonth );
}
//======================
function changeTableBackground(lunarMonth) {
	
	var sCSS = "";
	switch( lunarMonth ) {
		case 1:
			sCSS = "newyear";
			break;	
		case 2:
		case 3:
			sCSS = "spring";
			break;
		case 4:
		case 5:
		case 6:
			sCSS = "summer";
			break;
		case 7:
		case 8:
		case 9:
			sCSS = "autumn";
			break;
		default:
			sCSS = "winter";
	}
	_gel('main').setAttribute( isFireFox ? "class" : "className", sCSS);
}

function reScaleGadget() {
	_IG_AdjustIFrameHeight();
	
	var scrWidth = document.body.clientWidth;
	var xmlWidth = 300;
	if ( scrWidth > xmlWidth ) return;
	
	var ratio = (xmlWidth - (xmlWidth - scrWidth)) / xmlWidth;
	if ( ratio < 0.9 ) {
		_gel("ph_temperature").style.fontSize = "12pt";
		_gel("ph_humidity").style.fontSize = "12pt";
	}
}
/*****************************************************************************
	Main function
*****************************************************************************/	
function showInfo() {
	
	var prefs = new _IG_Prefs();
	gLang = prefs.getInt("dispLang");
	if ( isNaN(gLang) ) gLang = 1;

	setLocale();
	
	// Get Current Weather Info
	_IG_FetchContent(sCurrentUrl, _IG_Callback(fetchCurrent), { refreshInterval: 600 });
	
	// Get Weather Warnings
	_IG_FetchContent(sWarningUrl, _IG_Callback(fetchWarning), { refreshInterval: 600 });
	
	// Get Weather Forecast
	_IG_FetchContent(sForecastUrl, _IG_Callback(fetchForecast));

	// Calculate Lunar Calendar Info
	var today = new Date(); 
	calculateLunar( today ); 
	
	reScaleGadget();
	// Register Analytics
	_IG_Analytics("UA-760829-2", "/hkweather");
}	 
_IG_RegisterOnloadHandler(showInfo);
</script>
  ]]>
  </Content>
</Module>